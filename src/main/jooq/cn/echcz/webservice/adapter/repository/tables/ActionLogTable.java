/*
 * This file is generated by jOOQ.
 */
package cn.echcz.webservice.adapter.repository.tables;


import cn.echcz.webservice.adapter.repository.DefaultSchema;
import cn.echcz.webservice.adapter.repository.Indexes;
import cn.echcz.webservice.adapter.repository.Keys;
import cn.echcz.webservice.adapter.repository.tables.records.ActionLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 操作日志
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ActionLogTable extends TableImpl<ActionLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>action_log</code>
     */
    public static final ActionLogTable ACTION_LOG = new ActionLogTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActionLogRecord> getRecordType() {
        return ActionLogRecord.class;
    }

    /**
     * The column <code>action_log.id</code>. 主键
     */
    public final TableField<ActionLogRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>action_log.tenant_name</code>. 租户名
     */
    public final TableField<ActionLogRecord, String> TENANT_NAME = createField(DSL.name("tenant_name"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "租户名");

    /**
     * The column <code>action_log.actor_name</code>. 操作者名
     */
    public final TableField<ActionLogRecord, String> ACTOR_NAME = createField(DSL.name("actor_name"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "操作者名");

    /**
     * The column <code>action_log.actor_roles</code>. 操作者拥有的角色，用逗号分隔
     */
    public final TableField<ActionLogRecord, String> ACTOR_ROLES = createField(DSL.name("actor_roles"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "操作者拥有的角色，用逗号分隔");

    /**
     * The column <code>action_log.group</code>. 操作组
     */
    public final TableField<ActionLogRecord, String> GROUP = createField(DSL.name("group"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "操作组");

    /**
     * The column <code>action_log.name</code>. 操作名
     */
    public final TableField<ActionLogRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "操作名");

    /**
     * The column <code>action_log.type</code>. 操作类型
     */
    public final TableField<ActionLogRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("COMMAND", SQLDataType.VARCHAR)), this, "操作类型");

    /**
     * The column <code>action_log.content</code>. 操作内容
     */
    public final TableField<ActionLogRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "操作内容");

    /**
     * The column <code>action_log.action_time</code>. 操作时间
     */
    public final TableField<ActionLogRecord, LocalDateTime> ACTION_TIME = createField(DSL.name("action_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "操作时间");

    private ActionLogTable(Name alias, Table<ActionLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private ActionLogTable(Name alias, Table<ActionLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("操作日志"), TableOptions.table());
    }

    /**
     * Create an aliased <code>action_log</code> table reference
     */
    public ActionLogTable(String alias) {
        this(DSL.name(alias), ACTION_LOG);
    }

    /**
     * Create an aliased <code>action_log</code> table reference
     */
    public ActionLogTable(Name alias) {
        this(alias, ACTION_LOG);
    }

    /**
     * Create a <code>action_log</code> table reference
     */
    public ActionLogTable() {
        this(DSL.name("action_log"), null);
    }

    public <O extends Record> ActionLogTable(Table<O> child, ForeignKey<O, ActionLogRecord> key) {
        super(child, key, ACTION_LOG);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACTION_LOG_IDX_TENANT_ACTION_TIME);
    }

    @Override
    public Identity<ActionLogRecord, Long> getIdentity() {
        return (Identity<ActionLogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ActionLogRecord> getPrimaryKey() {
        return Keys.KEY_ACTION_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<ActionLogRecord>> getKeys() {
        return Arrays.<UniqueKey<ActionLogRecord>>asList(Keys.KEY_ACTION_LOG_PRIMARY);
    }

    @Override
    public ActionLogTable as(String alias) {
        return new ActionLogTable(DSL.name(alias), this);
    }

    @Override
    public ActionLogTable as(Name alias) {
        return new ActionLogTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ActionLogTable rename(String name) {
        return new ActionLogTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ActionLogTable rename(Name name) {
        return new ActionLogTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
