/*
 * This file is generated by jOOQ.
 */
package cn.echcz.webservice.adapter.repository.tables;


import cn.echcz.webservice.adapter.repository.DefaultSchema;
import cn.echcz.webservice.adapter.repository.Keys;
import cn.echcz.webservice.adapter.repository.tables.records.DocumentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 文档
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentTable extends TableImpl<DocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>document</code>
     */
    public static final DocumentTable DOCUMENT = new DocumentTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentRecord> getRecordType() {
        return DocumentRecord.class;
    }

    /**
     * The column <code>document.id</code>. 主键
     */
    public final TableField<DocumentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>document.tenant_name</code>. 租户名
     */
    public final TableField<DocumentRecord, String> TENANT_NAME = createField(DSL.name("tenant_name"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "租户名");

    /**
     * The column <code>document.name</code>. 文档名称
     */
    public final TableField<DocumentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "文档名称");

    /**
     * The column <code>document.file_path</code>. 文件地址
     */
    public final TableField<DocumentRecord, String> FILE_PATH = createField(DSL.name("file_path"), SQLDataType.VARCHAR(255).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "文件地址");

    /**
     * The column <code>document.username</code>. 用户名
     */
    public final TableField<DocumentRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "用户名");

    /**
     * The column <code>document.create_time</code>. 创建时间
     */
    public final TableField<DocumentRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>document.update_time</code>. 更新时间
     */
    public final TableField<DocumentRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "更新时间");

    private DocumentTable(Name alias, Table<DocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private DocumentTable(Name alias, Table<DocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("文档"), TableOptions.table());
    }

    /**
     * Create an aliased <code>document</code> table reference
     */
    public DocumentTable(String alias) {
        this(DSL.name(alias), DOCUMENT);
    }

    /**
     * Create an aliased <code>document</code> table reference
     */
    public DocumentTable(Name alias) {
        this(alias, DOCUMENT);
    }

    /**
     * Create a <code>document</code> table reference
     */
    public DocumentTable() {
        this(DSL.name("document"), null);
    }

    public <O extends Record> DocumentTable(Table<O> child, ForeignKey<O, DocumentRecord> key) {
        super(child, key, DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<DocumentRecord, Long> getIdentity() {
        return (Identity<DocumentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DocumentRecord> getPrimaryKey() {
        return Keys.KEY_DOCUMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DocumentRecord>> getKeys() {
        return Arrays.<UniqueKey<DocumentRecord>>asList(Keys.KEY_DOCUMENT_PRIMARY, Keys.KEY_DOCUMENT_UK_NAME);
    }

    @Override
    public DocumentTable as(String alias) {
        return new DocumentTable(DSL.name(alias), this);
    }

    @Override
    public DocumentTable as(Name alias) {
        return new DocumentTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentTable rename(String name) {
        return new DocumentTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentTable rename(Name name) {
        return new DocumentTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
